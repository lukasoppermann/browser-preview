{"version":3,"sources":["webpack://exports/webpack/bootstrap","webpack://exports/./node_modules/@skpm/fs/index.js","webpack://exports/./src/browser-preview.js","webpack://exports/./src/create-preview.js","webpack://exports/./src/sketch-utils.js","webpack://exports/external \"sketch\"","webpack://exports/external \"sketch/settings\""],"names":["Settings","require","sketch","context","options","scales","formats","output","overwriting","browser","settingForKey","document","getSelectedDocument","layers","selectedLayers","artboards","artboardIds","length","showMessage","map","layer","getParentArtboard","undefined","type","name","encodeURIComponent","id","backgroundColor","background","color","bounds","frame","object","filter","indexOf","artboard","push","forEach","previewFile","createPreview","util","fs","export","file","htmlFile","align","split","pop","trim","html","width","height","writeFileSync","runCommand","command","args","task","NSTask","alloc","init","setLaunchPath_","arguments","launch","waitUntilExit","terminationStatus"],"mappings":";;;;;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB,OAAO;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sDAAsD;AACrF,mCAAmC,0DAA0D;AAC7F,6BAA6B,mDAAmD;AAChF,wBAAwB,eAAe;AACvC,wBAAwB,iDAAiD;AACzE,0BAA0B,gDAAgD;AAC1E,gCAAgC,sDAAsD;AACtF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/UA;AACA;;AAEA,IAAIA,WAAW,mBAAAC,CAAQ,wCAAR,CAAf;;AACA,IAAIC,SAAS,mBAAAD,CAAQ,sBAAR,CAAb;;AAEA,+DAAe,UAASE,OAAT,EAAkB;AAC/B;AACA,MAAMC,UAAU;AACdC,YAAQ,GADM;AAEdC,aAAS,KAFK;AAGdC,YAAQ,MAHM;AAIdC,iBAAa;AAJC,GAAhB;AAMA,MAAIC,UAAUT,SAASU,aAAT,CAAuB,yBAAv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","file":"browser-preview.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/browser-preview.js\");\n","// TODO: async. Should probably be done with NSFileHandle and some notifications\n// TODO: file descriptor. Needs to be done with NSFileHandle\n\nmodule.exports.constants = {\n  F_OK: 0,\n  R_OK: 4,\n  W_OK: 2,\n  X_OK: 1\n}\n\nmodule.exports.accessSync = function(path, mode) {\n  mode = mode | 0\n  var fileManager = NSFileManager.defaultManager()\n\n  switch (mode) {\n    case 0:\n      return module.exports.existsSync(path)\n    case 1:\n      return Boolean(fileManager.isExecutableFileAtPath(path))\n    case 2:\n      return Boolean(fileManager.isWritableFileAtPath(path))\n    case 3:\n      return Boolean(fileManager.isExecutableFileAtPath(path) && fileManager.isWritableFileAtPath(path))\n    case 4:\n      return Boolean(fileManager.isReadableFileAtPath(path))\n    case 5:\n      return Boolean(fileManager.isReadableFileAtPath(path) && fileManager.isExecutableFileAtPath(path))\n    case 6:\n      return Boolean(fileManager.isReadableFileAtPath(path) && fileManager.isWritableFileAtPath(path))\n    case 7:\n      return Boolean(fileManager.isReadableFileAtPath(path) && fileManager.isWritableFileAtPath(path) && fileManager.isExecutableFileAtPath(path))\n  }\n}\n\nmodule.exports.appendFileSync = function(file, data, options) {\n  if (!module.exports.existsSync(file)) {\n    return module.exports.writeFileSync(file, data, options)\n  }\n\n  var handle = NSFileHandle.fileHandleForWritingAtPath(file)\n  handle.seekToEndOfFile()\n\n  if (data && data.mocha && data.mocha().class() === 'NSData') {\n    handle.writeData(data)\n    return\n  }\n\n  var encoding = options && options.encoding ? options.encoding : (options ? options : 'utf8')\n\n  var string = NSString.stringWithString(data)\n  var nsdata\n\n  switch (encoding) {\n    case 'utf8':\n      nsdata = string.dataUsingEncoding(NSUTF8StringEncoding)\n      break\n    case 'ascii':\n      nsdata = string.dataUsingEncoding(NSASCIIStringEncoding)\n      break\n    case 'utf16le':\n    case 'ucs2':\n      nsdata = string.dataUsingEncoding(NSUTF16LittleEndianStringEncoding)\n      break\n    case 'base64':\n      var plainData = string.dataUsingEncoding(NSUTF8StringEncoding)\n      nsdata = plainData.base64EncodedStringWithOptions(0).dataUsingEncoding(NSUTF8StringEncoding)\n      break\n    case 'latin1':\n    case 'binary':\n      nsdata = string.dataUsingEncoding(NSISOLatin1StringEncoding)\n      break\n    case 'hex':\n      // TODO: how?\n    default:\n      nsdata = string.dataUsingEncoding(NSUTF8StringEncoding)\n      break\n  }\n\n  handle.writeData(data)\n}\n\nmodule.exports.chmodSync = function(path, mode) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.setAttributes_ofItemAtPath_error({\n    NSFilePosixPermissions: mode\n  }, path, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.copyFileSync = function(path, dest, flags) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.copyItemAtPath_toPath_error(path, dest, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.existsSync = function(path) {\n  var fileManager = NSFileManager.defaultManager()\n  return Boolean(fileManager.fileExistsAtPath(path))\n}\n\nmodule.exports.linkSync = function(existingPath, newPath) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.linkItemAtPath_toPath_error(existingPath, newPath, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.mkdirSync = function(path, mode) {\n  mode = mode || 0o777\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.createDirectoryAtPath_withIntermediateDirectories_attributes_error(path, false, {\n    NSFilePosixPermissions: mode\n  }, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.mkdtempSync = function(path) {\n  function makeid() {\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    for (var i = 0; i < 6; i++)\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n\n    return text;\n  }\n  var tempPath = path + makeid()\n  module.exports.mkdirSync(tempPath)\n  return tempPath\n}\n\nmodule.exports.readdirSync = function(path) {\n  var fileManager = NSFileManager.defaultManager()\n  var paths = fileManager.subpathsAtPath(path)\n  var arr = []\n  for (var i = 0; i < paths.length; i++) {\n    arr.push(paths[i])\n  }\n  return arr\n}\n\nmodule.exports.readFileSync = function(path, options) {\n  var encoding = options && options.encoding ? options.encoding : (options ? options : 'buffer')\n  var fileManager = NSFileManager.defaultManager()\n  var data = fileManager.contentsAtPath(path)\n  switch (encoding) {\n    case 'utf8':\n      return String(NSString.alloc().initWithData_encoding(data, NSUTF8StringEncoding))\n    case 'ascii':\n      return String(NSString.alloc().initWithData_encoding(data, NSASCIIStringEncoding))\n    case 'utf16le':\n    case 'ucs2':\n      return String(NSString.alloc().initWithData_encoding(data, NSUTF16LittleEndianStringEncoding))\n    case 'base64':\n      var nsdataDecoded = NSData.alloc().initWithBase64EncodedData_options(data, 0)\n      return String(NSString.alloc().initWithData_encoding(nsdataDecoded, NSUTF8StringEncoding))\n    case 'latin1':\n    case 'binary':\n      return String(NSString.alloc().initWithData_encoding(data, NSISOLatin1StringEncoding))\n    case 'hex':\n      // TODO: how?\n      return data\n    default:\n      return data\n  }\n}\n\nmodule.exports.readlinkSync = function(path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var result = fileManager.destinationOfSymbolicLinkAtPath_error(path, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n\n  return result\n}\n\nmodule.exports.realpathSync = function(path) {\n  return NSString.stringByResolvingSymlinksInPath(path)\n}\n\nmodule.exports.renameSync = function(oldPath, newPath) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.moveItemAtPath_toPath_error(oldPath, newPath, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.rmdirSync = function(path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  fileManager.removeItemAtPath_error(path, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.statSync = function(path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var result = fileManager.attributesOfItemAtPath_error(path, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n\n  return {\n    dev: String(result.NSFileDeviceIdentifier),\n    // ino: 48064969, The file system specific \"Inode\" number for the file.\n    mode: result.NSFileType | result.NSFilePosixPermissions,\n    nlink: Number(result.NSFileReferenceCount),\n    uid: String(result.NSFileOwnerAccountID),\n    gid: String(result.NSFileGroupOwnerAccountID),\n    // rdev: 0, A numeric device identifier if the file is considered \"special\".\n    size: Number(result.NSFileSize),\n    // blksize: 4096, The file system block size for i/o operations.\n    // blocks: 8, The number of blocks allocated for this file.\n    atimeMs: Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000,\n    mtimeMs: Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000,\n    ctimeMs: Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000,\n    birthtimeMs: Number(result.NSFileCreationDate.timeIntervalSince1970()) * 1000,\n    atime: new Date(Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000 + 0.5), // the 0.5 comes from the node source. Not sure why it's added but in doubt...\n    mtime: new Date(Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000 + 0.5),\n    ctime: new Date(Number(result.NSFileModificationDate.timeIntervalSince1970()) * 1000 + 0.5),\n    birthtime: new Date(Number(result.NSFileCreationDate.timeIntervalSince1970()) * 1000 + 0.5),\n    isBlockDevice: function() { return result.NSFileType === NSFileTypeBlockSpecial },\n    isCharacterDevice: function() { return result.NSFileType === NSFileTypeCharacterSpecial },\n    isDirectory: function() { return result.NSFileType === NSFileTypeDirectory },\n    isFIFO: function() { return false },\n    isFile: function() { return result.NSFileType === NSFileTypeRegular },\n    isSocket: function() { return result.NSFileType === NSFileTypeSocket },\n    isSymbolicLink: function() { return result.NSFileType === NSFileTypeSymbolicLink },\n  }\n}\n\nmodule.exports.symlinkSync = function(target, path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var result = fileManager.createSymbolicLinkAtPath_withDestinationPath_error(path, target, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.truncateSync = function(path, len) {\n  var hFile = NSFileHandle.fileHandleForUpdatingAtPath(sFilePath)\n  hFile.truncateFileAtOffset(len || 0)\n  hFile.closeFile()\n}\n\nmodule.exports.unlinkSync = function(path) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var result = fileManager.removeItemAtPath_error(path, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.utimesSync = function(path, aTime, mTime) {\n  var err = MOPointer.alloc().init()\n  var fileManager = NSFileManager.defaultManager()\n  var result = fileManager.setAttributes_ofItemAtPath_error({\n    NSFileModificationDate: aTime\n  }, path, err)\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n\nmodule.exports.writeFileSync = function(path, data, options) {\n  var encoding = options && options.encoding ? options.encoding : (options ? options : 'utf8')\n\n  if (data && data.mocha && data.mocha().class() === 'NSData') {\n    data.writeToFile_atomically(path, true)\n    return\n  }\n\n  var err = MOPointer.alloc().init()\n  var string = NSString.stringWithString(data)\n\n  switch (encoding) {\n    case 'utf8':\n      string.writeToFile_atomically_encoding_error(path, true, NSUTF8StringEncoding, err)\n      break\n    case 'ascii':\n      string.writeToFile_atomically_encoding_error(path, true, NSASCIIStringEncoding, err)\n      break\n    case 'utf16le':\n    case 'ucs2':\n      string.writeToFile_atomically_encoding_error(path, true, NSUTF16LittleEndianStringEncoding, err)\n      break\n    case 'base64':\n      var plainData = string.dataUsingEncoding(NSUTF8StringEncoding)\n      var nsdataEncoded = plainData.base64EncodedStringWithOptions(0)\n      nsdataEncoded.writeToFile_atomically(path, true)\n      break\n    case 'latin1':\n    case 'binary':\n      string.writeToFile_atomically_encoding_error(path, true, NSISOLatin1StringEncoding, err)\n      break\n    case 'hex':\n      // TODO: how?\n    default:\n      string.writeToFile_atomically_encoding_error(path, true, NSUTF8StringEncoding, err)\n      break\n  }\n\n  if (err.value() !== null) {\n    throw new Error(err.value())\n  }\n}\n","import * as util from './sketch-utils'\nimport createPreview from './create-preview'\n\nvar Settings = require('sketch/settings')\nvar sketch = require('sketch')\n\nexport default function(context) {\n  // export options\n  const options = {\n    scales: '2',\n    formats: 'png',\n    output: '/tmp',\n    overwriting: true\n  }\n  let browser = Settings.settingForKey('browser-preview-browser') || 'Default'\n  // get sketch document\n  const document = sketch.getSelectedDocument()\n  // get selected page\n  // const page = document.selectedPage\n  const layers = document.selectedLayers\n  let artboards = []\n  let artboardIds = []\n  // if no artboard selected\n  if (layers.length === 0) {\n    context.document.showMessage('⚠️ Please select at least one artboard or layer.');\n    return;\n  }\n\n  if( layers.length >= 1 ){\n    artboards = layers.layers.map(layer => {\n      // get parent Artboard if layer is not an artboard\n      if( layer.getParentArtboard() !== undefined ) {\n        layer = layer.getParentArtboard()\n      }\n      // return special artboard object\n      if( layer.type === 'Artboard' ) {\n        return {\n          name: encodeURIComponent(layer.name),\n          id: layer.id,\n          backgroundColor: layer.background.color,\n          bounds: layer.frame,\n          object: layer\n        }\n      }\n    })\n    .filter(artboard => {\n      if (artboardIds.indexOf(artboard.id) > -1) {\n        return false\n      }\n      return artboardIds.push(artboard.id)\n    })\n\n    context.document.showMessage(`Creating preview for ${artboards.length} artboards.`)\n\n    artboards.forEach(artboard => {\n      let previewFile = createPreview(artboard, options)\n      // play sound\n      util.runCommand(\"/usr/bin/afplay\", [\"/System/Library/Sounds/Glass.aiff\"])\n      // open export in browser\n      if (browser === 'Default') {\n        util.runCommand('/usr/bin/open', [previewFile])\n      } else {\n        util.runCommand('/usr/bin/open', [\"-a\", browser, previewFile])\n      }\n    })\n      // if( layer.type === 'Artboard' ) {\n      //   let previewFile = createPreview(artboard, options)\n      //   // play sound\n      //   util.runCommand(\"/usr/bin/afplay\", [\"/System/Library/Sounds/Glass.aiff\"])\n      //   // open export in browser\n      //   if (browser === 'Default') {\n      //     util.runCommand('/usr/bin/open', [previewFile])\n      //   } else {\n      //     util.runCommand('/usr/bin/open', [\"-a\", browser, previewFile])\n      //   }\n      // }\n    // )\n\n    // const artboard = context.selection.firstObject();\n    // if( artboard && artboard.isKindOfClass(MSArtboardGroup) ){\n    //   // show message\n    //   context.document.showMessage(`Creating preview for \"${artboard.name()}\" in ${browser}`)\n    //   // create export file directory\n    //   let previewFile = createPreview(artboard, options)\n    //   // play sound\n    //   util.runCommand(\"/usr/bin/afplay\", [\"/System/Library/Sounds/Glass.aiff\"])\n    //   // open export in browser\n    //   if (browser === 'Default') {\n    //     util.runCommand('/usr/bin/open', [previewFile])\n    //   } else {\n    //     util.runCommand('/usr/bin/open', [\"-a\", browser, previewFile])\n    //   }\n    // }\n    return;\n  }\n}\n","let sketch = require('sketch')\nlet fs = require('@skpm/fs')\n\nexport default (artboard\n  /* = {\n    object: artboard,\n    name: string\n    backgroundColor: string,\n    bounds: {\n      width: px\n      height: px\n    }\n  }*/\n, options) => {\n  // export file\n  sketch.export(artboard.object, options)\n  let file = options.output + \"/\" + artboard.name + \"@\" + options.scales + \"x.\" + options.formats\n  let htmlFile = `${options.output}/${artboard.name}.html`\n  let align = artboard.name.split(':').pop().trim()\n\n  // create html\n  let html = `<!DOCTYPE html>\n  <html>\n    <head>\n      <title>${artboard.name}</title>\n      <style type=\"text/css\">\n        html, body{\n          margin: 0;\n          background: ${artboard.backgroundColor};\n        }\n        .flex{\n          width: 100vw;\n          max-width: 100vw;\n          overflow-x: hidden;\n          display: flex;\n          justify-content: ${align === 'left' ? 'flex-start' : 'center'};\n        }\n        img{\n          position: relative;\n          width: ${artboard.bounds.width}px;\n          height: ${artboard.bounds.height}px;\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"flex\">\n        <img src=\"${file}\" alt=\"${artboard.name}\" /\n      </div>\n    </body>\n  </html>`\n  // create file\n  fs.writeFileSync(htmlFile, html)\n  // return file\n  return htmlFile\n}\n","export function runCommand(command, args) {\n  var task = NSTask.alloc().init();\n  task.setLaunchPath_(command);\n  task.arguments = args;\n  task.launch();\n  task.waitUntilExit();\n  return (task.terminationStatus() == 0)\n}\n","module.exports = require(\"sketch\");","module.exports = require(\"sketch/settings\");"],"sourceRoot":""}